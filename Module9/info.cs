//Exception - Исключение, событие которое может стать остановкой програмы
// общедоступные конструкторы класса Exception
/* Exception() - Инициализирует новый класс Exception
 * Exception(SerializationInfo, StreamContext) - Инициализирует новый экземпляр класса Exception С сериализованными данными 
 * Exception(string) - Инициализирует новый экзепляр класса Exception с указание сообщение об ошибке 
 * Exception(string, Exception) - Инициализирует новый экзепляр класса Exception с указание сообщение об ошибке и ссылкой на внутренее 
 */

//Свойства класса Exception 
/* Data - Вовзращант коллекцию пар "Ключ-Значение" предоставляет дополнительные сведенье об исключение.
 * В частых об свойстве вставляем дату исключение 
 * HelpLink - Получает или задает ссылку на файл справки, связанный с этим исключением
 * HResult - Возвращает или задает HResult - Кодированное числовое значение, присвоенное определененому исключению
 * InnemerException - Вовзращает экземпряр класса Exception, который вызвал текущие исключение 
 * Message - Возвращает сообщение, описанное текущие исключение 
 * Source - Возвращает или задает имя приложение или обьекта, вызвавшую ошибку 
 *  StackTrace - Получает строковое представление непосредственных кадров в стеке вызова 
 *  TargetSite - Возвращает метод, создавший текущие исключение
 */

// Методы класса Exception 
/* Equals(object) - Определяет равен ли обьект текущему обьекту 
 * GetBaseException() - При переопределение а произвольном классе возвращает исключение Excepton, 
 * которое является первопричиной одного или нескольких последующий исключений 
 * GetHashCode() - Служит в качестве хаш функции по умолчанию
 * GetObjectData(SerializationInfo, StreamContext) - При переопределние в произвольном классе задает обьект 
 * SerializationInfo сведенье об исклбчении
 * GetType() - Возвращает тип среды выполние текущего экземпляра 
 * MmberwiseClone() - Создает неполную копию текущего object 
 * ToString() - Создает и возращает строковое представление текущего исключение 
 */


//try - catch - finally - throw - Обработка исключение 
/* try - Код инкапсулирует проверяемый на исключение регион кода  .. try - обязательный блок 
 * catch - Когда произошло исключение, запускается блок кода catch  .. catch - обязательный блок 
 * finally - выполняется не зависимо, в любом случае было исключение или нет .. catch - не обязательный блок 
 * throw - Создание нового исключение 
 */
/* Конструкция 
 * try 
 * { Код на выполнее }
 * catch { в случаее кокда код не выполнился }
 * finally (Exception ex) when(ex.Message == "Какую ошибку хочешь обработать")
 * {Выполненеие в любом случаае }
 */

//Delegate - Указатель на функцию, Использование делегата позволяет нам инкапсулировать ссылку на метод внутри делегата,
// Затем обьект делегата может передан в метод в код, который может вызвать указанный метод без необходимости знать время компиляции,
// какой метод будет вызван. 
/* (Модификатор) (Возращаемый тип)  (Название делегата) ((Входные параметры))
 * public int Dele (int a, int b);
 * 
 */

//шаблоны, Универсальные или встроенные делегаты
/* Func - Этот делегат примимает один или несколько входных параметров и возвращает один выходной параметр. 
 * Последний параметр считается возвращаемым значение. Func Примимает до 16 входных параметров различных типов
 * Он должен иметь один возвращаемый тип. Тип параметра является обязательным, а входной параметр нет.
 *  ВСЕГДА ПОСЛЕДНИЙ ПАРАМЕТР ЯВЛЯЕТСЯ АОЗРАЩАЕМЫМ ТИПОМ 
 * .....................
 * Func <int, int, int> NameFunc = NameMethod;
 * int num = NameFunc(32,23);
 * .....................
 * 
 * Action - Принимает до 16 параметров, не возращает значение. Используется когда делегат не должен возращать значение.
 * .....................
 * Action <string> NameAction = new Action<string> (NameMethod);
 * NameAction("Что - то");
 *......................
 *
 * Predicate -  Этот делегат используется для проверки, Возвращает true OR False, Принимает всегда один параметр.
 * На практике используется где нужно проверить возращает логическое значение.
 *  ВСЕГДА ВОЗВРАЩАЕТ ЛОГИЧЕСКОЕ ЗНАЧЕНИЕ, И ИМЕЕТ ТОЛЬКО ОДИН ВХОДНОЙ ПАРАМЕТР
 * .....................
 * Predicate <string> NamePredicate = NameMethod;
 * bool isTrue = NamePredicate("Это истина?");
 */


// () => () Лямда выражения 
/* Правило оформление лямды выражение - Что бы создать лямда выражение в C#, нам нужно указать входные параметры 
 * (Если они есть) в левой части лямды-выражения =>, а в правой нам нужно поместить блок выражения.
 * Delegate del = (x, y) => (x + y);
 */

//Ковариатности и Контравариатности 
// Коварация - Это когда мы можем обьявить делегат и назначить ему методы другой сигнатуры, но которые являются производным от основного метода
/*      ВЕРНЕМСЯ ПОТОМ, ЭТО КОГДА ОДИН КЛАСС МОЖЕТ ВОЗВРАЩАТЬСЯ ДРУГИМ 
 */
// Контравариантность - это когда мы можем обьявить делегат и назначить ему методы другой сигнатуры, но которые являются болле уневерсальными по отношению типу параметра 
/*
 * ЭТО КОГДА ОДИН ДЛЯ ТЫ МОЖЕШЬ ПРИВЕСТИ К ДРУГОМУ И ВЫЗВАТЬ ЧЕРЕЗ МЕТОД
 */

// Event - Это уведомление, отправляемое обьектом, что бы сигнализировать о возникновение дествия
/* Издатель - класс вызывающий событие
 * Подписчик - класс который принимает уведомление
 * 1. Обьявление делегата
 * 2. Обьявление событие event
 * public delegate void Notify();
 * public class Procces
 * {
 *  public event Notify ProcessComplited;
 * }
 */

 /* ArgumentException	Непустой аргумент, передаваемый в метод, является недопустимым.
    ArgumentNullException	Аргумент, передаваемый в метод — null.
    ArgumentOutOfRangeException	Аргумент находится за пределами диапазона допустимых значений.
    DirectoryNotFoundException	Недопустимая часть пути к каталогу.
    DivideByZeroException	Знаменатель в операции деления или целого числа Decimal равен нулю.
    DriveNotFoundException	Диск недоступен или не существует.
    FileNotFoundException	Файл не существует.
    FormatException	Значение не находится в соответствующем формате для преобразования из строки методом преобразования, например Parse .
    IndexOutOfRangeException	Индекс находится за пределами границ массива или коллекции.
    InvalidOperationException	Вызов метода недопустим в текущем состоянии объекта.
    KeyNotFoundException	Не удается найти указанный ключ для доступа к элементу в коллекции.
    NotImplementedException	Метод или операция не реализованы.
    NotSupportedException	Метод или операция не поддерживается.
    ObjectDisposedException	Операция выполняется над объектом, который был ликвидирован.
    OverflowException	Арифметическое, приведение или операция преобразования приводят к переполнению.
    PathTooLongException	Длина пути или имени файла превышает максимальную длину, определенную системой.
    PlatformNotSupportedException	Операция не поддерживается на текущей платформе.
    RankException	В метод передается массив с неправильным числом измерений.
    TimeoutException	Срок действия интервала времени, выделенного для операции, истек.
    UriFormatException	Используется недопустимый универсальный код ресурса (URI).
 */
